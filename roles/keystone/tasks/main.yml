---
# tasks file for keystone
- name: Create keystone DB
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: keystone
    state: present

- name: Grant access to keystone DB
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    user: keystone
    password: "{{ KEYSTONE_DBPASS }}"
    state: present
    priv: "keystone.*:ALL,GRANT"
    host: "{{ item }}"
  with_items:
    - localhost
    - "%"

- name: Install keystone components
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - keystone
    - apache2
    - libapache2-mod-wsgi

- name: Edit [database] section in /etc/keystone/keystone.conf
  ini_file:
    dest: /etc/keystone/keystone.conf
    section: database
    option: connection
    value: mysql+pymysql://keystone:{{ KEYSTONE_DBPASS }}@controller/keystone

- name: Edit [token] section in /etc/keystone/keystone.conf
  ini_file:
    dest: /etc/keystone/keystone.conf
    section: token
    option: provider
    value: fernet

- name: Populate the Identity service database
  shell: /bin/sh -c "keystone-manage db_sync" keystone

- name: Initialize Fernet key repositories
  shell: |
    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

- name: Bootstrap the Identity service
  shell: |
    keystone-manage bootstrap --bootstrap-password {{ ADMIN_PASS }} \
    --bootstrap-admin-url http://controller:35357/v3/ \
    --bootstrap-internal-url http://controller:5000/v3/ \
    --bootstrap-public-url http://controller:5000/v3/ \
    --bootstrap-region-id RegionOne

- name: Edit the /etc/apache2/apache2.conf
  lineinfile:
    path: /etc/apache2/apache2.conf
    regexp: '^ServerName'
    line: 'ServerName controller'

- name: Restart the Apache service
  service:
    name: apache2
    state: restarted

- name: Check if Service project exists
  shell: openstack project show service
  register: result
  failed_when: result.rc > 1
  environment: "{{ ADMIN.env }}"

- name: Create "Service Project"
  shell: openstack project create --domain default \
    --description "Service Project" service
  when: result.rc == 1
  environment: "{{ ADMIN.env }}"

- name: Check if Demo project exists
  shell: openstack project show demo
  register: result
  failed_when: result.rc > 1
  environment: "{{ ADMIN.env }}"

- name: Create "Demo Project"
  shell: openstack project create --domain default \
    --description "Demos Project" demos
  when: result.rc == 1
  environment: "{{ ADMIN.env }}"

- name: Check if demo user exists
  shell: openstack user show demo
  register: result
  failed_when: result.rc > 1
  environment: "{{ ADMIN.env }}"

- name: Create demo user
  shell: openstack user create --domain default \
    --password {{ DEMO_PASS }} demo
  when: result.rc == 1
  environment: "{{ ADMIN.env }}"

- name: Check if user role exists
  shell: openstack role show user
  register: result
  failed_when: result.rc > 1
  environment: "{{ ADMIN.env }}"

- name: Create user role
  shell: openstack role create user
  when: result.rc == 1
  environment: "{{ ADMIN.env }}"

- name: Add the user role to the demo project and user
  shell: openstack role add --project demo --user demo user
  environment: "{{ ADMIN.env }}"
  changed_when: false
...
